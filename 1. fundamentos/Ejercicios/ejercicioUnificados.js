// 1Ô∏è‚É£ Crea una funci√≥n `procesarNumeros` que reciba un array de n√∫meros mixtos (positivos, negativos y ceros).
// Usa un bucle y operadores l√≥gicos para:
// - Separar en dos nuevos arrays: pares e impares.
// - Ignorar los ceros usando `continue`.
// Devuelve un objeto con { pares: [...], impares: [...] }.

// 2Ô∏è‚É£ Crea un objeto `usuario` con propiedades nombre, edad y un array de compras.
// Usa un `if` y un operador ternario para determinar:
// - Si edad < 18: "Usuario menor sin acceso a compras"
// - Si edad >= 18: muestra el n√∫mero de compras que tiene y la primera compra.
// Usa `typeof` para verificar tipos antes de procesar.

// 3Ô∏è‚É£ Declara dos variables `a` y `b` que pueden ser n√∫mero o string.
// Si ambos son n√∫meros, haz todas las operaciones aritm√©ticas y muestra los resultados.
// Si ambos son strings, concat√©nalos en may√∫sculas.
// Si son de tipos distintos, muestra un error usando `throw` y `try...catch` para capturarlo.

// 4Ô∏è‚É£ Crea un array de objetos `productos` con {nombre, precio}.
// Usa un bucle `for` para calcular el total, pero si alg√∫n producto tiene precio no num√©rico, usa `try...catch` para capturar el error y sigue con el siguiente usando `continue`.
// Al final, muestra el total.

// 5Ô∏è‚É£ Crea una funci√≥n `analizarTexto` que reciba un string. 
// Si no es string, lanza un error.
// Si es string, recorre cada letra y cuenta cu√°ntas son vocales y cu√°ntas consonantes.
// Devuelve un objeto {vocales: X, consonantes: Y}.

// 6Ô∏è‚É£ Simula un carrito: un array de objetos con {nombre, precio, cantidad}.
// Recorre el array con un `for`, multiplica precio*cantidad y suma al total.
// Si alg√∫n producto tiene cantidad 0 o negativa, usa `continue` para saltarlo.
// Si el total supera 500, aplica un descuento del 10% usando un operador ternario.

// 7Ô∏è‚É£ Crea una funci√≥n `clasificarEdades` que reciba un array de edades.
// Con un bucle, usa `if/else` para clasificarlas en 4 arrays: menores, adultos j√≥venes, adultos, adultos mayores.
// Devuelve un objeto con esos 4 arrays.
// Usa `instanceof` para asegurarte de que el par√°metro recibido es un array antes de procesar.

// 8Ô∏è‚É£ Crea un array de n√∫meros y usa un bucle `for` para modificarlos:
// - Si es par, multipl√≠calo por 2.
// - Si es impar, s√∫male 5.
// - Si el n√∫mero es mayor a 50 despu√©s del c√°lculo, s√°calo del array (usa `splice` con cuidado dentro del bucle).

// 9Ô∏è‚É£ Declara dos Symbols con la misma descripci√≥n y comprueba si son estrictamente iguales.
// Adem√°s, guarda ambos en un objeto como claves de propiedades y muestra c√≥mo se comporta ese objeto al imprimirlo.

// üîü Crea una funci√≥n `procesarDatosMixtos` que reciba un array con datos de distintos tipos.
// Recorre el array con un bucle y:
// - Si es number y > 0, s√∫malo a un total.
// - Si es string, gu√°rdalo en un array de strings.
// - Si es booleano y true, cuenta cu√°ntos hay.
// - Si es objeto o array, ign√≥ralo.
// Devuelve un objeto { totalNumeros: X, listaStrings: [...], cantidadTrue: Y }.
