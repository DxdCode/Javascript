// 1Ô∏è‚É£ Escribe una funci√≥n que determine si dos palabras son anagramas (tienen las mismas letras en distinto orden).
// Ejemplo: "Roma" y "Amor" ‚Üí true

const sonAnagramas = (str1, str2) => {
  // tu c√≥digo aqu√≠
};

// 2Ô∏è‚É£ Crea una funci√≥n que reciba un texto y devuelva cu√°ntas palabras √∫nicas contiene.
// Ejemplo: "Hola hola mundo" ‚Üí 2

const contarPalabrasUnicas = (texto) => {
  // tu c√≥digo aqu√≠
};

// 3Ô∏è‚É£ Implementa una funci√≥n que determine si un n√∫mero es un n√∫mero feliz.
// Un n√∫mero feliz termina en 1 despu√©s de reemplazar repetidamente el n√∫mero con la suma de los cuadrados de sus d√≠gitos.

const esNumeroFeliz = (numero) => {
  // tu c√≥digo aqu√≠
};

// 4Ô∏è‚É£ Dado un string, devuelve el primer car√°cter no repetido.
// Ejemplo: "aabccdeff" ‚Üí "b"

const primerNoRepetido = (texto) => {
  // tu c√≥digo aqu√≠
};

// 5Ô∏è‚É£ Crea una funci√≥n que reciba un n√∫mero y devuelva true si es un n√∫mero "arm√≥nico".
// Un n√∫mero arm√≥nico es aquel en el que la suma de los divisores propios es mayor al n√∫mero mismo.

const esArm√≥nico = (numero) => {
  // tu c√≥digo aqu√≠
};

// 6Ô∏è‚É£ Dado un array de n√∫meros, encuentra el subarray con la suma m√°s alta (Kadane‚Äôs Algorithm level).
// Ejemplo: [‚àí2,1,‚àí3,4,‚àí1,2,1,‚àí5,4] ‚Üí 6 (subarray: [4,‚àí1,2,1])

const maxSubarraySuma = (arr) => {
  // tu c√≥digo aqu√≠
};

// 7Ô∏è‚É£ Implementa una funci√≥n que compruebe si una cadena contiene todos los caracteres del alfabeto (pangrama).
// Ejemplo: "El veloz murci√©lago hind√∫ com√≠a feliz cardillo y kiwi" ‚Üí true

const esPangrama = (frase) => {
  // tu c√≥digo aqu√≠
};

// 8Ô∏è‚É£ Escribe una funci√≥n que determine si una matriz es un cuadrado m√°gico (la suma de filas, columnas y diagonales es igual).

const esCuadradoMagico = (matriz) => {
  // tu c√≥digo aqu√≠
};

// 9Ô∏è‚É£ Implementa una funci√≥n que reciba un n√∫mero entero y lo convierta a n√∫mero romano.
// Ejemplo: 1994 ‚Üí "MCMXCIV"

const aNumeroRomano = (numero) => {
  // tu c√≥digo aqu√≠
};

// üîü Crea una funci√≥n que reciba un string con operaciones matem√°ticas simples y devuelva el resultado.
// Ejemplo: "3 + 5 * 2 - 4 / 2" ‚Üí 11

const evaluarExpresion = (expresion) => {
  // tu c√≥digo aqu√≠
};


