
// üß± EJERCICIOS DE ESTRUCTURAS DE DATOS (PILAS, COLAS, √ÅRBOLES, GRAFOS)

// 1Ô∏è‚É£ Implementa una pila (stack) desde cero con m√©todos push, pop, peek y isEmpty.

// 2Ô∏è‚É£ Implementa una cola (queue) desde cero con m√©todos enqueue, dequeue, front y isEmpty.

// 3Ô∏è‚É£ Dado un string con par√©ntesis, corchetes y llaves ((), [], {}), usa una pila para validar si est√°n correctamente balanceados.
// Ejemplo: estaBalanceado("[()]{}") ‚Üí true, estaBalanceado("[(])") ‚Üí false

// 4Ô∏è‚É£ Crea un √°rbol binario de b√∫squeda (BST) con m√©todos insertar, buscar y recorrido en orden.

// 5Ô∏è‚É£ Dado un √°rbol binario, encuentra su profundidad m√°xima usando recursi√≥n.
// Ejemplo: maxDepth(root) ‚Üí 3

// 6Ô∏è‚É£ Implementa un grafo no dirigido usando listas de adyacencia.
// Agrega m√©todos para agregar nodos, aristas, y recorrerlo con BFS y DFS.

// 7Ô∏è‚É£ Dado un grafo representado como objeto o mapa, encuentra si hay un camino entre dos nodos usando BFS.

// 8Ô∏è‚É£ Escribe una funci√≥n que use una cola para simular el proceso de impresi√≥n de una impresora.
// Cada tarea tiene prioridad. La m√°s alta se imprime primero.

// 9Ô∏è‚É£ Implementa una funci√≥n para verificar si un √°rbol binario es un √°rbol binario de b√∫squeda v√°lido (BST).

// üîü Simula una pila de deshacer/rehacer (undo/redo) en un editor de texto usando dos pilas.
// Operaciones: escribir, deshacer, rehacer.
